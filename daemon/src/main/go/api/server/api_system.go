/*
 * MiniCloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/TheNextLvl-net/mini-cloud/daemon/main/src/go/api"
)

// SystemApiController binds http requests to an api service and writes the service results to the http response
type SystemApiController struct {
	service      SystemApiServicer
	errorHandler ErrorHandler
}

// SystemApiOption for how the controller is set up.
type SystemApiOption func(*SystemApiController)

// WithSystemApiErrorHandler inject ErrorHandler into controller
func WithSystemApiErrorHandler(h ErrorHandler) SystemApiOption {
	return func(c *SystemApiController) {
		c.errorHandler = h
	}
}

// NewSystemApiController creates a default api controller
func NewSystemApiController(s SystemApiServicer, opts ...SystemApiOption) Router {
	controller := &SystemApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SystemApiController
func (c *SystemApiController) Routes() Routes {
	return Routes{
		{
			"ListenEvents",
			strings.ToUpper("Post"),
			"/api/v1/events",
			c.ListenEvents,
		},
	}
}

// ListenEvents - Monitor events
func (c *SystemApiController) ListenEvents(w http.ResponseWriter, r *http.Request) {
	eventsRequestParam := api.EventsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&eventsRequestParam); err != nil {
		c.errorHandler(w, r, &api.ParsingError{Err: err}, nil)
		return
	}
	if err := api.AssertEventsRequestRequired(eventsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenEvents(r.Context(), eventsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
