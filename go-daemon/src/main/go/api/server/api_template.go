/*
 * MiniCloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TemplateApiController binds http requests to an api service and writes the service results to the http response
type TemplateApiController struct {
	service      TemplateApiServicer
	errorHandler ErrorHandler
}

// TemplateApiOption for how the controller is set up.
type TemplateApiOption func(*TemplateApiController)

// WithTemplateApiErrorHandler inject ErrorHandler into controller
func WithTemplateApiErrorHandler(h ErrorHandler) TemplateApiOption {
	return func(c *TemplateApiController) {
		c.errorHandler = h
	}
}

// NewTemplateApiController creates a default api controller
func NewTemplateApiController(s TemplateApiServicer, opts ...TemplateApiOption) Router {
	controller := &TemplateApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TemplateApiController
func (c *TemplateApiController) Routes() Routes {
	return Routes{
		{
			"CreateTemplate",
			strings.ToUpper("Post"),
			"/api/v1/template",
			c.CreateTemplate,
		},
		{
			"DownloadTemplate",
			strings.ToUpper("Get"),
			"/api/v1/template/{name}/download",
			c.DownloadTemplate,
		},
		{
			"GetTemplate",
			strings.ToUpper("Get"),
			"/api/v1/template/{name}",
			c.GetTemplate,
		},
		{
			"GetTemplates",
			strings.ToUpper("Get"),
			"/api/v1/template",
			c.GetTemplates,
		},
		{
			"RemoveTemplate",
			strings.ToUpper("Delete"),
			"/api/v1/template/{name}",
			c.RemoveTemplate,
		},
		{
			"UpdateTemplate",
			strings.ToUpper("Put"),
			"/api/v1/template",
			c.UpdateTemplate,
		},
	}
}

// CreateTemplate - Create a new template
func (c *TemplateApiController) CreateTemplate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	bodyParam := r.Body
	result, err := c.service.CreateTemplate(r.Context(), nameParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DownloadTemplate - Downloads the template
func (c *TemplateApiController) DownloadTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	result, err := c.service.DownloadTemplate(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTemplate - Get the template
func (c *TemplateApiController) GetTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	result, err := c.service.GetTemplate(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTemplates - Get all templates
func (c *TemplateApiController) GetTemplates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTemplates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemoveTemplate - Delete an existing template
func (c *TemplateApiController) RemoveTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	result, err := c.service.RemoveTemplate(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateTemplate - Update the files of the template
func (c *TemplateApiController) UpdateTemplate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	bodyParam := r.Body
	result, err := c.service.UpdateTemplate(r.Context(), nameParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
