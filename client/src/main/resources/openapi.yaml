openapi: 3.0.3
info:
  contact:
    email: apiteam@swagger.io
  description: ""
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MiniCloud API
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /
tags:
  - description: Operations about the server groups
    name: server group
  - description: Operations about the servers
    name: server
  - description: Operations about the server templates
    name: template
paths:
  /api/v1/group:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServerGroup'
                type: array
          description: Successful operation
      summary: Get all server groups
      tags:
        - server group
      x-accepts: application/json
      x-tags:
        - tag: server group
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerGroup'
        description: Create a new server group
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerGroup'
          description: Successful operation
        "400":
          description: Invalid input
        "409":
          description: Server group already exists
      summary: Create a new server group
      tags:
        - server group
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: server group
  /api/v1/group/{name}:
    delete:
      parameters:
        - description: Name of the server group
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "409":
          description: Server group not found
      summary: Delete an existing server group
      tags:
        - server group
      x-accepts: application/json
      x-tags:
        - tag: server group
    get:
      parameters:
        - description: Name of the server group
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerGroup'
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server group not found
      summary: Get the server group
      tags:
        - server group
      x-accepts: application/json
      x-tags:
        - tag: server group
  /api/v1/group/{name}/servers:
    get:
      parameters:
        - description: Name of the server group
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerList'
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server group not found
      summary: Get all servers of the group
      tags:
        - server group
      x-accepts: application/json
      x-tags:
        - tag: server group
  /api/v1/server:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Server'
                type: array
          description: Successful operation
      summary: Get all servers
      tags:
        - server
      x-accepts: application/json
      x-tags:
        - tag: server
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_v1_server_post_request'
        description: Create a new server
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
          description: Successful operation
        "400":
          description: Invalid input
        "409":
          description: Server already exists
      summary: Create a new server
      tags:
        - server
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
        - tag: server
  /api/v1/server/{name}:
    delete:
      parameters:
        - description: Name of the server
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server not found
      summary: Delete an existing server
      tags:
        - server
      x-accepts: application/json
      x-tags:
        - tag: server
    get:
      parameters:
        - description: Name of the server
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server not found
      summary: Get the server
      tags:
        - server
      x-accepts: application/json
      x-tags:
        - tag: server
  /server/{name}/start:
    post:
      parameters:
        - description: Name of the server
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server not found
      summary: Start the server
      tags:
        - server
      x-accepts: application/json
      x-tags:
        - tag: server
  /server/{name}/stop:
    post:
      parameters:
        - description: Name of the server
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Server not found
      summary: Stop the server
      tags:
        - server
      x-accepts: application/json
      x-tags:
        - tag: server
  /api/v1/template:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: Successful operation
      summary: Get all templates
      tags:
        - template
      x-accepts: application/json
      x-tags:
        - tag: template
    post:
      parameters:
        - description: Name of the template
          example: lobby-template
          explode: true
          in: query
          name: name
          required: true
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: The tar binary of the template folder
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Successful operation
        "409":
          description: Template already exists
      summary: Create a new template
      tags:
        - template
      x-content-type: application/octet-stream
      x-accepts: application/json
      x-tags:
        - tag: template
    put:
      parameters:
        - description: Name of the template
          example: lobby-template
          explode: true
          in: query
          name: name
          required: true
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        description: The tar binary of the template folder
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Successful operation
      summary: Update the files of the template
      tags:
        - template
      x-content-type: application/octet-stream
      x-accepts: application/json
      x-tags:
        - tag: template
  /api/v1/template/{name}:
    delete:
      parameters:
        - description: Name of the template
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "403":
          description: Template in use
        "404":
          description: Template not found
      summary: Delete an existing template
      tags:
        - template
      x-accepts: application/json
      x-tags:
        - tag: template
    get:
      parameters:
        - description: Name of the template
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: Successful operation
        "400":
          description: Invalid input
        "404":
          description: Template not found
      summary: Get the template
      tags:
        - template
      x-accepts: application/json
      x-tags:
        - tag: template
  /api/v1/template/{name}/download:
    get:
      parameters:
        - description: Name of the template
          explode: false
          in: path
          name: name
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Successful operation
        "204":
          description: Empty template
        "400":
          description: Invalid input
        "404":
          description: Template not found
      summary: Downloads the template
      tags:
        - template
      x-accepts: application/octet-stream
      x-tags:
        - tag: template
components:
  schemas:
    Template:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        size: 0
        name: lobby-template
        command: java -jar server.jar
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          example: lobby-template
          pattern: "^[a-zA-Z0-9-_]+$"
          type: string
        command:
          example: java -jar server.jar
          type: string
        size:
          format: uint64
          type: integer
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    ServerGroup:
      example:
        template: lobby-template
        name: lobby
        ports:
          - target-port: 25565
            protocol: tcp
            publish-mode: ingress
            published-port: 25565
            name: minecraft
          - target-port: 25565
            protocol: tcp
            publish-mode: ingress
            published-port: 25565
            name: minecraft
        max-players-per-server: 20
      properties:
        name:
          example: lobby
          pattern: "^[a-zA-Z0-9-_]+$"
          type: string
        template:
          example: lobby-template
          pattern: "^[a-zA-Z0-9-_]+$"
          type: string
        ports:
          items:
            $ref: '#/components/schemas/Port'
          type: array
        max-players-per-server:
          example: 20
          format: int32
          type: integer
      type: object
    Port:
      example:
        target-port: 25565
        protocol: tcp
        publish-mode: ingress
        published-port: 25565
        name: minecraft
      properties:
        name:
          example: minecraft
          type: string
        protocol:
          enum:
            - tcp
            - udp
            - sctp
          example: tcp
          type: string
        target-port:
          example: 25565
          format: uint16
          type: integer
        published-port:
          example: 25565
          format: uint16
          type: integer
        publish-mode:
          enum:
            - ingress
            - host
          example: ingress
          type: string
      type: object
    Server:
      example:
        ip-address: 10.0.0.11
        online-players: 4
        name: lobby-1
        group: lobby
        status: starting
      properties:
        name:
          example: lobby-1
          format: "^[a-zA-Z0-9-_]+$"
          type: string
        group:
          example: lobby
          format: "^[a-zA-Z0-9-_]+$"
          type: string
        ip-address:
          example: 10.0.0.11
          type: string
        status:
          description: Server Status
          enum:
            - stating
            - online
            - offline
          example: starting
          type: string
        online-players:
          example: 4
          format: int32
          nullable: false
          type: integer
      type: object
    ServerList:
      example:
        servers:
          - ip-address: 10.0.0.11
            online-players: 4
            name: lobby-1
            group: lobby
            status: starting
          - ip-address: 10.0.0.11
            online-players: 4
            name: lobby-1
            group: lobby
            status: starting
      properties:
        servers:
          items:
            $ref: '#/components/schemas/Server'
          type: array
      type: object
    _api_v1_server_post_request:
      properties:
        group:
          example: lobby
          nullable: true
          type: string
      type: object
