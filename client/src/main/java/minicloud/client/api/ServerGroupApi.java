/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package minicloud.client.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;
import minicloud.client.model.Server;
import minicloud.client.model.ServerGroup;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "server group", description = "Operations about the server groups")
public interface ServerGroupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/group : Create a new server group
     *
     * @param serverGroup Create a new server group (required)
     * @return Successful operation (status code 201)
     *         or Invalid input (status code 400)
     *         or Server group already exists (status code 409)
     */
    @Operation(
        operationId = "createGroup",
        summary = "Create a new server group",
        tags = { "server group" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerGroup.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "409", description = "Server group already exists")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ServerGroup> createGroup(
        @Parameter(name = "ServerGroup", description = "Create a new server group", required = true) @Valid @RequestBody ServerGroup serverGroup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"template\" : \"lobby-template\", \"name\" : \"lobby\", \"ports\" : [ { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 }, { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 } ], \"max-players-per-server\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/group/{name} : Get the server group
     *
     * @param name Name of the server group (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Server group not found (status code 404)
     */
    @Operation(
        operationId = "getGroup",
        summary = "Get the server group",
        tags = { "server group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerGroup.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Server group not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/group/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<ServerGroup> getGroup(
        @Pattern(regexp = "^[a-zA-Z0-9-_]+$") @Parameter(name = "name", description = "Name of the server group", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"template\" : \"lobby-template\", \"name\" : \"lobby\", \"ports\" : [ { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 }, { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 } ], \"max-players-per-server\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/group : Get all server groups
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getGroups",
        summary = "Get all server groups",
        tags = { "server group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ServerGroup.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/group",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ServerGroup>> getGroups(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"template\" : \"lobby-template\", \"name\" : \"lobby\", \"ports\" : [ { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 }, { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 } ], \"max-players-per-server\" : 20 }, { \"template\" : \"lobby-template\", \"name\" : \"lobby\", \"ports\" : [ { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 }, { \"target-port\" : 25565, \"hostname\" : \"minecraft\", \"protocol\" : \"tcp\", \"publish-mode\" : \"ingress\", \"published-port\" : 25565 } ], \"max-players-per-server\" : 20 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/group/{name}/servers : Get all servers of the group
     *
     * @param name Name of the server group (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Server group not found (status code 404)
     */
    @Operation(
        operationId = "getServersInGroup",
        summary = "Get all servers of the group",
        tags = { "server group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Server group not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/group/{name}/servers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Server>> getServersInGroup(
        @Pattern(regexp = "^[a-zA-Z0-9-_]+$") @Parameter(name = "name", description = "Name of the server group", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"ip-address\" : \"10.0.0.11\", \"online-players\" : 4, \"name\" : \"lobby-1\", \"group\" : \"lobby\", \"status\" : \"starting\" }, { \"ip-address\" : \"10.0.0.11\", \"online-players\" : 4, \"name\" : \"lobby-1\", \"group\" : \"lobby\", \"status\" : \"starting\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/group/{name} : Delete an existing server group
     *
     * @param name Name of the server group (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Server group not found (status code 409)
     */
    @Operation(
        operationId = "removeGroup",
        summary = "Delete an existing server group",
        tags = { "server group" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "409", description = "Server group not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/group/{name}"
    )
    default ResponseEntity<Void> removeGroup(
        @Pattern(regexp = "^[a-zA-Z0-9-_]+$") @Parameter(name = "name", description = "Name of the server group", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
