/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package minicloud.client;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.processing.Generated;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-11T02:45:50.392067379+02:00[Europe/Berlin]")
@Validated
@Tag(name = "server", description = "Operations about the servers")
public interface ServerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /server/{name}/start : Start the server
     *
     * @param name Name of the server (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Server not found (status code 404)
     */
    @Operation(
        operationId = "serverNameStartPost",
        summary = "Start the server",
        tags = { "server" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Server not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/server/{name}/start"
    )
    default ResponseEntity<Void> serverNameStartPost(
        @Parameter(name = "name", description = "Name of the server", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /server/{name}/stop : Stop the server
     *
     * @param name Name of the server (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Server not found (status code 404)
     */
    @Operation(
        operationId = "serverNameStopPost",
        summary = "Stop the server",
        tags = { "server" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Server not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/server/{name}/stop"
    )
    default ResponseEntity<Void> serverNameStopPost(
        @Parameter(name = "name", description = "Name of the server", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
